include:
  - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v1/.cscs.yml'

stages:
  - build
  - test
  - notify

##
## BUILDS
##

.build_spack_common:
  extends: .dind
  stage: build
  only:
    - master
    - staging
    - trying
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    # TODO: Change this back. The latter is on msimberg/spack.
    # SPACK_SHA: 522a7c8ee0d51f92aa8cd685f378d54735a5307e
    SPACK_SHA: 737f0cc1c79e8eb903e2fc2d48d02982cd392a22
  before_script:
    - docker login -u $CSCS_REGISTRY_USER -p $CSCS_REGISTRY_PASSWORD $CSCS_REGISTRY
  script:
    - TAG1=`echo $BASE_IMAGE$COMPILER$SPACK_SHA$USE_MKL | sha256sum - | head -c 8`
    - TAG2=`cat $BUILD_DOCKER_FILE $SPACK_ENVIRONMENT | sha256sum - | head -c 64`
    - TAG=$TAG1$TAG2
    - docker build -t $BUILD_IMAGE:$TAG -t $BUILD_IMAGE:latest --cache-from $BUILD_IMAGE:$TAG --cache-from $BUILD_IMAGE:latest --build-arg BASE_IMAGE --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg SPACK_SHA --build-arg COMPILER --build-arg SPACK_ENVIRONMENT --build-arg USE_MKL -f $BUILD_DOCKER_FILE --network=host .
    - docker push $BUILD_IMAGE:$TAG
    - docker push $BUILD_IMAGE:latest
    - docker build -t $DEPLOY_IMAGE --build-arg BUILD_IMAGE=$BUILD_IMAGE:$TAG --build-arg USE_MKL -f $DEPLOY_DOCKER_FILE --network=host .
    - docker push $DEPLOY_IMAGE
    - docker run -v $PWD/ci/ctest_to_gitlab.sh:/ctest_to_gitlab.sh $DEPLOY_IMAGE /ctest_to_gitlab.sh "$DEPLOY_IMAGE" "$USE_CODECOV" "$THREADS_PER_NODE" "$SLURM_CONSTRAINT" > pipeline.yml
  artifacts:
    paths:
      - pipeline.yml

# Builds a Docker image for the current commit
cpu release build gcc9:
  extends: .build_spack_common
  variables:
    BUILD_DOCKER_FILE: ci/docker/build.Dockerfile
    DEPLOY_DOCKER_FILE: ci/docker/deploy.Dockerfile
    BASE_IMAGE: ubuntu:20.04
    COMPILER: gcc@9.3.0
    USE_MKL: "ON"
    SPACK_ENVIRONMENT: ci/docker/cpu-release.yaml
    BUILD_IMAGE: $CSCS_REGISTRY_IMAGE/release-cpu-gcc9/build
    DEPLOY_IMAGE: $CSCS_REGISTRY_IMAGE/release-cpu-gcc9/deploy:$CI_COMMIT_SHA
    SLURM_CONSTRAINT: mc
    THREADS_PER_NODE: 72
    USE_CODECOV: "false"

cpu release build clang10:
  extends: .build_spack_common
  variables:
    BUILD_DOCKER_FILE: ci/docker/build.Dockerfile
    DEPLOY_DOCKER_FILE: ci/docker/deploy.Dockerfile
    BASE_IMAGE: ubuntu:20.04
    COMPILER: clang@10.0.0
    USE_MKL: "ON"
    SPACK_ENVIRONMENT: ci/docker/cpu-release.yaml
    BUILD_IMAGE: $CSCS_REGISTRY_IMAGE/release-cpu-clang10/build
    DEPLOY_IMAGE: $CSCS_REGISTRY_IMAGE/release-cpu-clang10/deploy:$CI_COMMIT_SHA
    SLURM_CONSTRAINT: mc
    THREADS_PER_NODE: 72
    USE_CODECOV: "false"

cpu codecov build gcc9:
  extends: .build_spack_common
  variables:
    BUILD_DOCKER_FILE: ci/docker/build.Dockerfile
    DEPLOY_DOCKER_FILE: ci/docker/codecov.Dockerfile
    BASE_IMAGE: ubuntu:20.04
    COMPILER: gcc@9.3.0
    USE_MKL: "OFF"
    SPACK_ENVIRONMENT: ci/docker/cpu-debug.yaml
    BUILD_IMAGE: $CSCS_REGISTRY_IMAGE/codecov-cpu-gcc9/build
    DEPLOY_IMAGE: $CSCS_REGISTRY_IMAGE/codecov-cpu-gcc9/deploy:$CI_COMMIT_SHA
    SLURM_CONSTRAINT: mc
    THREADS_PER_NODE: 72
    USE_CODECOV: "true"

gpu release build gcc9:
  extends: .build_spack_common
  variables:
    BUILD_DOCKER_FILE: ci/docker/build.Dockerfile
    DEPLOY_DOCKER_FILE: ci/docker/deploy.Dockerfile
    BASE_IMAGE: nvidia/cuda:11.1.1-devel-ubuntu20.04
    COMPILER: gcc@9.3.0
    USE_MKL: "ON"
    SPACK_ENVIRONMENT: ci/docker/gpu-release.yaml
    BUILD_IMAGE: $CSCS_REGISTRY_IMAGE/release-gpu-gcc9/build
    DEPLOY_IMAGE: $CSCS_REGISTRY_IMAGE/release-gpu-gcc9/deploy:$CI_COMMIT_SHA
    SLURM_CONSTRAINT: gpu
    THREADS_PER_NODE: 24
    USE_CODECOV: "false"

gpu release build clang10:
  extends: .build_spack_common
  variables:
    BUILD_DOCKER_FILE: ci/docker/build.Dockerfile
    DEPLOY_DOCKER_FILE: ci/docker/deploy.Dockerfile
    BASE_IMAGE: nvidia/cuda:11.1.1-devel-ubuntu20.04
    COMPILER: clang@10.0.0
    USE_MKL: "ON"
    SPACK_ENVIRONMENT: ci/docker/gpu-release.yaml
    BUILD_IMAGE: $CSCS_REGISTRY_IMAGE/release-gpu-clang10/build
    DEPLOY_IMAGE: $CSCS_REGISTRY_IMAGE/release-gpu-clang10/deploy:$CI_COMMIT_SHA
    SLURM_CONSTRAINT: gpu
    THREADS_PER_NODE: 24
    USE_CODECOV: "false"

gpu codecov build gcc9:
  extends: .build_spack_common
  variables:
    BUILD_DOCKER_FILE: ci/docker/build.Dockerfile
    DEPLOY_DOCKER_FILE: ci/docker/codecov.Dockerfile
    BASE_IMAGE: nvidia/cuda:11.1.1-devel-ubuntu20.04
    COMPILER: gcc@9.3.0
    USE_MKL: "OFF"
    SPACK_ENVIRONMENT: ci/docker/gpu-debug.yaml
    BUILD_IMAGE: $CSCS_REGISTRY_IMAGE/codecov-gpu-gcc9/build
    DEPLOY_IMAGE: $CSCS_REGISTRY_IMAGE/codecov-gpu-gcc9/deploy:$CI_COMMIT_SHA
    SLURM_CONSTRAINT: gpu
    THREADS_PER_NODE: 24
    USE_CODECOV: "true"

notify_github_start:
  stage: build
  allow_failure: true
  only: ['master', 'staging', 'trying']
  tags: ['kubernetes']
  image: stabbles/git-curl
  script: ./ci/set_github_status.sh pending

##
## RUNS
##

.run_common:
  stage: test
  only:
    - master
    - staging
    - trying
  trigger:
    strategy: depend

cpu release test gcc9:
  extends: .run_common
  needs:
    - cpu release build gcc9
  trigger:
    include:
      - artifact: pipeline.yml
        job: cpu release build gcc9

cpu release test clang10:
  extends: .run_common
  needs:
    - cpu release build clang10
  trigger:
    include:
      - artifact: pipeline.yml
        job: cpu release build clang10

cpu codecov test gcc9:
  extends: .run_common
  needs:
    - cpu codecov build gcc9
  trigger:
    strategy: depend
    include:
      - artifact: pipeline.yml
        job: cpu codecov build gcc9

gpu release test gcc9:
  extends: .run_common
  needs:
    - gpu release build gcc9
  trigger:
    include:
      - artifact: pipeline.yml
        job: gpu release build gcc9

gpu release test clang10:
  extends: .run_common
  needs:
    - gpu release build clang10
  trigger:
    include:
      - artifact: pipeline.yml
        job: gpu release build clang10

gpu codecov test gcc9:
  extends: .run_common
  needs:
    - gpu codecov build gcc9
  trigger:
    strategy: depend
    include:
      - artifact: pipeline.yml
        job: gpu codecov build gcc9

notify_github_success:
  stage: notify
  when: on_success
  only: ['master', 'staging', 'trying']
  tags: ['kubernetes']
  image: stabbles/git-curl
  script: ./ci/set_github_status.sh success

notify_github_failure:
  stage: notify
  when: on_failure
  only: ['master', 'staging', 'trying']
  tags: ['kubernetes']
  image: stabbles/git-curl
  script: ./ci/set_github_status.sh failure
