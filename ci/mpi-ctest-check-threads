#!/bin/bash -eu

pushd /DLA-Future-build > /dev/null

# Get commands of all tests, since we will run the commands directly under
# strace.
ctest -N
IFS=$'\n' all_tests=($(ctest $@ --show-only=json-v1 | jq --raw-output '.tests | map(.command) | .[] | join(" ")'))

num_failed_tests=0

for test in "${all_tests[@]}"; do
    # Run the tests, only output on the first rank
    if [[ $SLURM_PROCID == "0" ]]; then
        echo "# Testing \"$test\""

        strace_output_file=$(mktemp -u -t dlaf-strace-output.tmp.XXXXXXXXXX)
        test_output_file=$(mktemp -u -t dlaf-test-output.tmp.XXXXXXXXXX)
        TZ=CET date +"Run started at: %H:%M:%S %z"
        # We check here for clone3 syscalls. Not all systems use clone3 when
        # spawning threads. clone may be used on some systems.
        strace --output="$strace_output_file" -f -e clone3 bash -c "$test --pika:print-bind" |& tee "$test_output_file"
        TZ=CET date +"Run finished at: %H:%M:%S %z"

        num_threads=$(cat "$test_output_file" | grep -c 'PU L')
        # We expect pika to spawn one additional thread outside of thread pools
        num_threads_expected=$(( num_threads + 1 ))
        num_threads_spawned=$(cat "$strace_output_file" | grep -c 'clone3(')
        echo "pika runtime used $num_threads threads"
        echo "Expected $num_threads_expected threads to be spawned in total"
        echo "Actually spawned $num_threads_spawned threads"

        if (( num_threads_spawned != num_threads_expected )); then
            echo "Spawned $(( num_threads_spawned - num_threads_expected )) more threads than expected"
            num_failed_tests=$(( num_failed_tests + 1 ))
        fi
    else
        bash -c "$test" > /dev/null
    fi
done

popd > /dev/null

if [[ $SLURM_PROCID == "0" ]]; then
        echo "$num_failed_tests test(s) failed"
fi

exit $num_failed_tests
