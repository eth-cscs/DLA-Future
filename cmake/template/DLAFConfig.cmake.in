#
# Distributed Linear Algebra with Future (DLAF)
#
# Copyright (c) 2018-2023, ETH Zurich
# All rights reserved.
#
# Please, refer to the LICENSE file in the root directory.
# SPDX-License-Identifier: BSD-3-Clause
#

@PACKAGE_INIT@

if(NOT TARGET DLAF)
  include(${CMAKE_CURRENT_LIST_DIR}/DLAF-Targets.cmake)
endif()

# enable custom modules to be used
list(PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

# ===== VARIABLES
set(DLAF_WITH_OPENMP @DLAF_WITH_OPENMP@)
set(DLAF_WITH_MKL @DLAF_WITH_MKL@)
set(DLAF_WITH_CUDA @DLAF_WITH_CUDA@)
set(DLAF_WITH_HIP @DLAF_WITH_HIP@)
set(DLAF_WITH_GPU @DLAF_WITH_GPU@)
set(DLAF_WITH_SCALAPACK @DLAF_WITH_SCALAPACK@)

# ===== DEPENDENCIES
include(CMakeFindDependencyMacro)

# ---- CUDA/HIP
if(DLAF_WITH_CUDA)
  find_dependency(CUDAToolkit)
endif()

if(DLAF_WITH_HIP)
  find_dependency(rocblas)
  find_dependency(rocprim)
  find_dependency(rocsolver)
  find_dependency(rocthrust)
endif()

if(DLAF_WITH_GPU)
  find_dependency(whip)
endif()

# ----- MPI
find_dependency(MPI)

# ----- OpenMP
if(DLAF_WITH_OPENMP)
  find_dependency(OpenMP)
endif()

# ----- LAPACK
if(DLAF_WITH_MKL)
  set(MKL_ROOT "@MKL_ROOT@")
  set(MKL_CUSTOM_THREADING "@MKL_THREADING@")

  find_dependency(MKL)

  set(MKL_LAPACK_TARGET "@MKL_LAPACK_TARGET@")
  add_library(DLAF::LAPACK INTERFACE IMPORTED GLOBAL)
  target_link_libraries(DLAF::LAPACK INTERFACE ${MKL_LAPACK_TARGET})

  if(DLAF_WITH_SCALAPACK)
    set(MKL_SCALAPACK_TARGET "@MKL_SCALAPACK_TARGET@")
    add_library(DLAF::SCALAPACK INTERFACE IMPORTED GLOBAL)
    target_link_libraries(DLAF::SCALAPACK INTERFACE ${MKL_SCALAPACK_TARGET})
  endif()
else()
  set(LAPACK_LIBRARY "@LAPACK_LIBRARY@")
  find_dependency(LAPACK)

  if(DLAF_WITH_SCALAPACK)
    set(SCALAPACK_LIBRARY "@SCALAPACK_LIBRARY@")
    find_dependency(SCALAPACK)
  endif()
endif()

# ----- pika
find_dependency(pika PATHS @pika_DIR@)
find_dependency(pika-algorithms PATHS @pika-algorithms_DIR@)

# ----- BLASPP/LAPACKPP
find_dependency(blaspp PATHS @blaspp_DIR@)
find_dependency(lapackpp PATHS @lapackpp_DIR@)

# ----- UMPIRE
find_dependency(Umpire PATHS @Umpire_DIR@)

if(DLAF_WITH_HDF5)
  find_dependency(HDF5 PATHS @HDF5_DIR@)
endif()

check_required_components(DLAF)
