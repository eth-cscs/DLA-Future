diff --git a/googletest/include/gtest/gtest.h b/googletest/include/gtest/gtest.h
index c8996695..e4bd164d 100644
--- a/googletest/include/gtest/gtest.h
+++ b/googletest/include/gtest/gtest.h
@@ -57,6 +57,7 @@
 #include <set>
 #include <sstream>
 #include <string>
+#include <thread>
 #include <type_traits>
 #include <vector>
 
@@ -2077,15 +2078,18 @@ class GTEST_API_ ScopedTrace {
   // Slow, but flexible.
   template <typename T>
   ScopedTrace(const char* file, int line, const T& message) {
+    id = std::this_thread::get_id();
     PushTrace(file, line, (Message() << message).GetString());
   }
 
   // Optimize for some known types.
   ScopedTrace(const char* file, int line, const char* message) {
+    id = std::this_thread::get_id();
     PushTrace(file, line, message ? message : "(null)");
   }
 
   ScopedTrace(const char* file, int line, const std::string& message) {
+    id = std::this_thread::get_id();
     PushTrace(file, line, message);
   }
 
@@ -2100,6 +2104,8 @@ class GTEST_API_ ScopedTrace {
 
   ScopedTrace(const ScopedTrace&) = delete;
   ScopedTrace& operator=(const ScopedTrace&) = delete;
+
+  std::thread::id id;
 };
 
 // Causes a trace (including the source file path, the current line
diff --git a/googletest/src/gtest.cc b/googletest/src/gtest.cc
index 7ff82546..6e658ebc 100644
--- a/googletest/src/gtest.cc
+++ b/googletest/src/gtest.cc
@@ -47,6 +47,7 @@
 #include <cstdint>
 #include <cstdlib>
 #include <cstring>
+#include <exception>
 #include <initializer_list>
 #include <iomanip>
 #include <ios>
@@ -58,6 +59,7 @@
 #include <ostream>  // NOLINT
 #include <set>
 #include <sstream>
+#include <thread>
 #include <unordered_set>
 #include <utility>
 #include <vector>
@@ -6991,6 +6993,13 @@ void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
 
 // Pops the info pushed by the c'tor.
 ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
+  if (id != std::this_thread::get_id()) {
+    std::cerr << "ScopedTrace was created and destroyed on different "
+                 "std::threads, terminating to avoid segfaults, hangs, or "
+                 "silent corruption. Are you using any pika functionality that "
+                 "may yield a task after creating the ScopedTrace?\n";
+    std::terminate();
+  }
   UnitTest::GetInstance()->PopGTestTrace();
 }
 
