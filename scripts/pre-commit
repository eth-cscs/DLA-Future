#!/bin/bash

#
# Distributed Linear Algebra with Future (DLAF)
#
# Copyright (c) 2018-2023, ETH Zurich
# All rights reserved.
#
# Please, refer to the LICENSE file in the root directory.
# SPDX-License-Identifier: BSD-3-Clause
#

# ----------------------------------------------------------------
# simple pre commit hook script to check that *.cpp and *.hpp files
# are correctly clang-formatted and that CMakeLists.txt and *.cmake
# files are cmake-formatted

# To use this hook, you must have clang-format and cmake-format
# installed on your system

# To install this hook, symlink this hook to your git hooks as follows
# (note that the extra ../../ in the path is because git runs the hook
# from the .git/hooks directory, so the symlink has to be redirected)
# ln -s -f ../../tools/pre-commit .git/hooks/pre-commit
# ----------------------------------------------------------------

CLANG_FORMAT_VERSION=clang-format-12

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
normal=$(tput sgr0)

cxxfiles=()
for file in `git diff --cached --name-only --diff-filter=ACMRT | grep -E "\.(cpp|hpp)$"`; do
    if ! cmp -s <(git show :${file}) <(git show :${file}|$CLANG_FORMAT_VERSION -style=file); then
        cxxfiles+=("${file}")
    fi
done

cmakefiles=()
for file in `git diff --cached --name-only --diff-filter=ACMRT | grep -E "(CMakeLists\.txt|\.cmake)$"`; do
    tmpfile=$(mktemp /tmp/cmake-check.XXXXXX)
    git show :${file} > $tmpfile
    cmake-format -c $(pwd)/.cmake-format.py -i $tmpfile
    if ! cmp -s <(git show :${file}) <(cat $tmpfile); then
        cmakefiles+=("${file}")
    fi
    rm $tmpfile
done

returncode=0
full_list=

if [ -n "${cxxfiles}" ]; then
    printf "# ${blue}clang-format ${red}error pre-commit${normal} : To fix run the following (use git commit ${yellow}--no-verify${normal} to bypass)\n"
    for f in "${cxxfiles[@]}" ; do
        rel=$(realpath --relative-to "./$GIT_PREFIX" $f)
        printf "$CLANG_FORMAT_VERSION -i %s\n" "$rel"
        full_list="${rel} ${full_list}"
    done
    returncode=1
fi

if [ -n "${cmakefiles}" ]; then
    printf "# ${green}cmake-format ${red}error pre-commit${normal} : To fix run the following (use git commit ${yellow}--no-verify${normal} to bypass)\n"
    for f in "${cmakefiles[@]}" ; do
        rel=$(realpath --relative-to "./$GIT_PREFIX" $f)
        printf "cmake-format -i %s\n" "$rel"
        full_list="${rel} ${full_list}"
    done
    returncode=1
fi

if [ ! -z "$full_list" ]; then
    printf "\n# ${red}To commit the corrected files, run\n${normal}\ngit add ${full_list}\n"
fi

exit $returncode
